name: Windows Build and Test

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-windows:
    runs-on: windows-latest
    outputs:
      test_exit_code: ${{ steps.run-tests.outputs.exit_code }}
    strategy:
      matrix:
        build_type: [Release]
        c_compiler: [cl]
        cpp_compiler: [cl]

    steps:
      - uses: actions/checkout@v4

      - name: Install vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat

      - name: Install dependencies via vcpkg manifest
        run: .\vcpkg\vcpkg.exe install

      - name: Configure CMake
        run: cmake -B build -S . -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}

      - name: Build
        run: cmake --build build --config ${{ matrix.build_type }}

      - name: Run Tests and Save Output
        id: run-tests
        run: |
          $ErrorActionPreference = "Continue"
          $output = ctest --test-dir build --build-config ${{ matrix.build_type }} --output-on-failure
          $exitCode = $LASTEXITCODE

          # output in file
          $output | Out-File -FilePath test_output.txt -Encoding utf8

          # exit code as output
          echo "exit_code=$exitCode" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Upload test output artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test_output.txt

  notify:
    runs-on: ubuntu-latest
    needs: build-windows
    steps:
      - name: Download test results artifact
        uses: actions/download-artifact@v4
        with:
          name: test-results
          path: ./test_results

      - name: Read test output
        id: read-output
        run: |
          FULL_OUTPUT=$(cat ./test_results/test_output.txt)
          PREVIEW=$(echo "$FULL_OUTPUT" | head -n 100)
          ERRORS=$(echo "$FULL_OUTPUT" | grep -iE 'error|fail' | head -n 10 || true)

          # Escape backticks and quotes
          PREVIEW_ESCAPED=$(echo "$PREVIEW" | sed 's/`/\\`/g; s/"/\\"/g')
          ERRORS_ESCAPED=$(echo "$ERRORS" | sed 's/`/\\`/g; s/"/\\"/g')

          echo "preview<<EOF" >> $GITHUB_OUTPUT
          echo "$PREVIEW_ESCAPED" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "errors<<EOF" >> $GITHUB_OUTPUT
          echo "$ERRORS_ESCAPED" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_TESTS }}
        run: |
          STATUS="${{ needs.build-windows.outputs.test_exit_code }}"
          PREVIEW="${{ steps.read-output.outputs.preview }}"
          ERRORS="${{ steps.read-output.outputs.errors }}"

          if [ "$STATUS" = "0" ]; then
            COLOR=3066993
            TITLE="✅ Tests Passed"
            DESCRIPTION="Tests ran successfully.\n\nPreview of output:\n\`\`\`\n$PREVIEW\n\`\`\`"
          else
            COLOR=15158332
            TITLE="❌ Tests Failed"
            DESCRIPTION="Some tests failed.\n\nError output (first 10 error lines):\n\`\`\`\n$ERRORS\n\`\`\`\n\nFull output preview:\n\`\`\`\n$PREVIEW\n\`\`\`"
          fi

          PAYLOAD=$(jq -n \
            --arg title "$TITLE" \
            --arg desc "$DESCRIPTION" \
            --argjson color $COLOR \
            '{embeds: [{title: $title, description: $desc, color: $color}]}')

          curl -H "Content-Type: application/json" -X POST -d "$PAYLOAD" "$DISCORD_WEBHOOK"
